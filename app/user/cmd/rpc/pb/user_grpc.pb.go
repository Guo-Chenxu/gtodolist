// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: desc/user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Uerrpc_Register_FullMethodName = "/pb.uerrpc/Register"
	Uerrpc_Login_FullMethodName    = "/pb.uerrpc/Login"
)

// UerrpcClient is the client API for Uerrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UerrpcClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
}

type uerrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUerrpcClient(cc grpc.ClientConnInterface) UerrpcClient {
	return &uerrpcClient{cc}
}

func (c *uerrpcClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, Uerrpc_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uerrpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Uerrpc_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UerrpcServer is the server API for Uerrpc service.
// All implementations must embed UnimplementedUerrpcServer
// for forward compatibility
type UerrpcServer interface {
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	mustEmbedUnimplementedUerrpcServer()
}

// UnimplementedUerrpcServer must be embedded to have forward compatible implementations.
type UnimplementedUerrpcServer struct {
}

func (UnimplementedUerrpcServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUerrpcServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUerrpcServer) mustEmbedUnimplementedUerrpcServer() {}

// UnsafeUerrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UerrpcServer will
// result in compilation errors.
type UnsafeUerrpcServer interface {
	mustEmbedUnimplementedUerrpcServer()
}

func RegisterUerrpcServer(s grpc.ServiceRegistrar, srv UerrpcServer) {
	s.RegisterService(&Uerrpc_ServiceDesc, srv)
}

func _Uerrpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UerrpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uerrpc_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UerrpcServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uerrpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UerrpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uerrpc_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UerrpcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Uerrpc_ServiceDesc is the grpc.ServiceDesc for Uerrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uerrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.uerrpc",
	HandlerType: (*UerrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Uerrpc_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Uerrpc_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desc/user.proto",
}
