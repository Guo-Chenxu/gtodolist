// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: desc/task.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Userrpc_CreateTask_FullMethodName = "/pb.userrpc/CreateTask"
	Userrpc_ListTask_FullMethodName   = "/pb.userrpc/ListTask"
	Userrpc_ShowTask_FullMethodName   = "/pb.userrpc/ShowTask"
	Userrpc_UpdateTask_FullMethodName = "/pb.userrpc/UpdateTask"
	Userrpc_SearchTask_FullMethodName = "/pb.userrpc/SearchTask"
	Userrpc_DeleteTask_FullMethodName = "/pb.userrpc/DeleteTask"
)

// UserrpcClient is the client API for Userrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserrpcClient interface {
	CreateTask(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReq, error)
	ListTask(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	ShowTask(ctx context.Context, in *ShowReq, opts ...grpc.CallOption) (*ShowResp, error)
	UpdateTask(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
	SearchTask(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	DeleteTask(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
}

type userrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserrpcClient(cc grpc.ClientConnInterface) UserrpcClient {
	return &userrpcClient{cc}
}

func (c *userrpcClient) CreateTask(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReq, error) {
	out := new(CreateReq)
	err := c.cc.Invoke(ctx, Userrpc_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) ListTask(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, Userrpc_ListTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) ShowTask(ctx context.Context, in *ShowReq, opts ...grpc.CallOption) (*ShowResp, error) {
	out := new(ShowResp)
	err := c.cc.Invoke(ctx, Userrpc_ShowTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) UpdateTask(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, Userrpc_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) SearchTask(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, Userrpc_SearchTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) DeleteTask(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, Userrpc_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserrpcServer is the server API for Userrpc service.
// All implementations must embed UnimplementedUserrpcServer
// for forward compatibility
type UserrpcServer interface {
	CreateTask(context.Context, *CreateReq) (*CreateReq, error)
	ListTask(context.Context, *ListReq) (*ListResp, error)
	ShowTask(context.Context, *ShowReq) (*ShowResp, error)
	UpdateTask(context.Context, *UpdateReq) (*UpdateResp, error)
	SearchTask(context.Context, *SearchReq) (*SearchResp, error)
	DeleteTask(context.Context, *DeleteReq) (*DeleteResp, error)
	mustEmbedUnimplementedUserrpcServer()
}

// UnimplementedUserrpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserrpcServer struct {
}

func (UnimplementedUserrpcServer) CreateTask(context.Context, *CreateReq) (*CreateReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedUserrpcServer) ListTask(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedUserrpcServer) ShowTask(context.Context, *ShowReq) (*ShowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTask not implemented")
}
func (UnimplementedUserrpcServer) UpdateTask(context.Context, *UpdateReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedUserrpcServer) SearchTask(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTask not implemented")
}
func (UnimplementedUserrpcServer) DeleteTask(context.Context, *DeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedUserrpcServer) mustEmbedUnimplementedUserrpcServer() {}

// UnsafeUserrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserrpcServer will
// result in compilation errors.
type UnsafeUserrpcServer interface {
	mustEmbedUnimplementedUserrpcServer()
}

func RegisterUserrpcServer(s grpc.ServiceRegistrar, srv UserrpcServer) {
	s.RegisterService(&Userrpc_ServiceDesc, srv)
}

func _Userrpc_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).CreateTask(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_ListTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).ListTask(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_ShowTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).ShowTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_ShowTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).ShowTask(ctx, req.(*ShowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).UpdateTask(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_SearchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).SearchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_SearchTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).SearchTask(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).DeleteTask(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Userrpc_ServiceDesc is the grpc.ServiceDesc for Userrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.userrpc",
	HandlerType: (*UserrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Userrpc_CreateTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _Userrpc_ListTask_Handler,
		},
		{
			MethodName: "ShowTask",
			Handler:    _Userrpc_ShowTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Userrpc_UpdateTask_Handler,
		},
		{
			MethodName: "SearchTask",
			Handler:    _Userrpc_SearchTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Userrpc_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desc/task.proto",
}
