// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: desc/task.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Taskrpc_CreateTask_FullMethodName = "/pb.taskrpc/CreateTask"
	Taskrpc_ListTask_FullMethodName   = "/pb.taskrpc/ListTask"
	Taskrpc_ShowTask_FullMethodName   = "/pb.taskrpc/ShowTask"
	Taskrpc_UpdateTask_FullMethodName = "/pb.taskrpc/UpdateTask"
	Taskrpc_SearchTask_FullMethodName = "/pb.taskrpc/SearchTask"
	Taskrpc_DeleteTask_FullMethodName = "/pb.taskrpc/DeleteTask"
)

// TaskrpcClient is the client API for Taskrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskrpcClient interface {
	CreateTask(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReq, error)
	ListTask(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	ShowTask(ctx context.Context, in *ShowReq, opts ...grpc.CallOption) (*ShowResp, error)
	UpdateTask(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
	SearchTask(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	DeleteTask(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
}

type taskrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskrpcClient(cc grpc.ClientConnInterface) TaskrpcClient {
	return &taskrpcClient{cc}
}

func (c *taskrpcClient) CreateTask(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReq, error) {
	out := new(CreateReq)
	err := c.cc.Invoke(ctx, Taskrpc_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskrpcClient) ListTask(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, Taskrpc_ListTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskrpcClient) ShowTask(ctx context.Context, in *ShowReq, opts ...grpc.CallOption) (*ShowResp, error) {
	out := new(ShowResp)
	err := c.cc.Invoke(ctx, Taskrpc_ShowTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskrpcClient) UpdateTask(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, Taskrpc_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskrpcClient) SearchTask(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, Taskrpc_SearchTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskrpcClient) DeleteTask(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, Taskrpc_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskrpcServer is the server API for Taskrpc service.
// All implementations must embed UnimplementedTaskrpcServer
// for forward compatibility
type TaskrpcServer interface {
	CreateTask(context.Context, *CreateReq) (*CreateReq, error)
	ListTask(context.Context, *ListReq) (*ListResp, error)
	ShowTask(context.Context, *ShowReq) (*ShowResp, error)
	UpdateTask(context.Context, *UpdateReq) (*UpdateResp, error)
	SearchTask(context.Context, *SearchReq) (*SearchResp, error)
	DeleteTask(context.Context, *DeleteReq) (*DeleteResp, error)
	mustEmbedUnimplementedTaskrpcServer()
}

// UnimplementedTaskrpcServer must be embedded to have forward compatible implementations.
type UnimplementedTaskrpcServer struct {
}

func (UnimplementedTaskrpcServer) CreateTask(context.Context, *CreateReq) (*CreateReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskrpcServer) ListTask(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedTaskrpcServer) ShowTask(context.Context, *ShowReq) (*ShowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTask not implemented")
}
func (UnimplementedTaskrpcServer) UpdateTask(context.Context, *UpdateReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskrpcServer) SearchTask(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTask not implemented")
}
func (UnimplementedTaskrpcServer) DeleteTask(context.Context, *DeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskrpcServer) mustEmbedUnimplementedTaskrpcServer() {}

// UnsafeTaskrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskrpcServer will
// result in compilation errors.
type UnsafeTaskrpcServer interface {
	mustEmbedUnimplementedTaskrpcServer()
}

func RegisterTaskrpcServer(s grpc.ServiceRegistrar, srv TaskrpcServer) {
	s.RegisterService(&Taskrpc_ServiceDesc, srv)
}

func _Taskrpc_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskrpcServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskrpc_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskrpcServer).CreateTask(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskrpc_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskrpcServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskrpc_ListTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskrpcServer).ListTask(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskrpc_ShowTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskrpcServer).ShowTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskrpc_ShowTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskrpcServer).ShowTask(ctx, req.(*ShowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskrpc_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskrpcServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskrpc_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskrpcServer).UpdateTask(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskrpc_SearchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskrpcServer).SearchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskrpc_SearchTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskrpcServer).SearchTask(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskrpc_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskrpcServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskrpc_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskrpcServer).DeleteTask(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Taskrpc_ServiceDesc is the grpc.ServiceDesc for Taskrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Taskrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.taskrpc",
	HandlerType: (*TaskrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Taskrpc_CreateTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _Taskrpc_ListTask_Handler,
		},
		{
			MethodName: "ShowTask",
			Handler:    _Taskrpc_ShowTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Taskrpc_UpdateTask_Handler,
		},
		{
			MethodName: "SearchTask",
			Handler:    _Taskrpc_SearchTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Taskrpc_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desc/task.proto",
}
